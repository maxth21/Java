package Lab3;// LinkedNumberSequence.java

import java.util.ArrayList;
import java.util.List;

public class LinkedNumberSequence implements NumberSequence
{
	@Override
	public int length() {
		int count = 0;
		Node current = first;
		while (current != null) {
			count++;
			current = current.next;
		}
		return count;
	}

	@Override
	public double upperBound() {
		if (first == null) {
			throw new IllegalStateException("Sequence is empty");
		}
		Node current = first;
		double max = current.number;
		while (current != null) {
			if (current.number > max) {
				max = current.number;
			}
			current = current.next;
		}
		return max;
	}

	@Override
	public double lowerBound() {
		if (first == null) {
			throw new IllegalStateException("Sequence is empty");
		}
		Node current = first;
		double min = current.number;
		while (current != null) {
			if (current.number < min) {
				min = current.number;
			}
			current = current.next;
		}
		return min;
	}

	@Override
	public double numberAt(int position) throws IndexOutOfBoundsException {
		if (position < 0 || position >= length()) {
			throw new IndexOutOfBoundsException("Invalid position");
		}
		Node current = first;
		for (int i = 0; i < position; i++) {
			current = current.next;
		}
		return current.number;
	}

	@Override
	public int positionOf(double number) {
		Node current = first;
		int index = 0;
		while (current != null) {
			if (current.number == number) {
				return index;
			}
			current = current.next;
			index++;
		}
		return -1; // Return -1 if the number is not found in the sequence
	}

	@Override
	public boolean isIncreasing() {
		Node current = first;
		while (current != null && current.next != null) {
			if (current.number > current.next.number) {
				return false;
			}
			current = current.next;
		}
		return true;
	}

	@Override
	public boolean isDecreasing() {
		Node current = first;
		while (current != null && current.next != null) {
			if (current.number < current.next.number) {
				return false;
			}
			current = current.next;
		}
		return true;
	}

	@Override
	public boolean contains(double number) {
		Node current = first;
		while (current != null) {
			if (current.number == number) {
				return true;
			}
			current = current.next;
		}
		return false;
	}

	@Override
	public void add(double number) {
		Node newNode = new Node(number);
		if (first == null) {
			first = newNode;
		} else {
			Node current = first;
			while (current.next != null) {
				current = current.next;
			}
			current.next = newNode;
		}
	}

	@Override
	public void insert(int position, double number) throws IndexOutOfBoundsException {
		if (position < 0 || position > length()) {
			throw new IndexOutOfBoundsException("Invalid position");
		}

		Node newNode = new Node(number);
		if (position == 0) {
			newNode.next = first;
			first = newNode;
		} else {
			Node current = first;
			for (int i = 0; i < position - 1; i++) {
				current = current.next;
			}
			newNode.next = current.next;
			current.next = newNode;
		}
	}

	@Override
	public void removeAt(int position) throws IndexOutOfBoundsException, IllegalStateException {
		if (length() <= 2) {
			throw new IllegalStateException("Sequence should have at least two numbers");
		}

		if (position < 0 || position >= length()) {
			throw new IndexOutOfBoundsException("Invalid position");
		}

		if (position == 0) {
			first = first.next;
		} else {
			Node current = first;
			for (int i = 0; i < position - 1; i++) {
				current = current.next;
			}
			current.next = current.next.next;
		}
	}


	private class Node
	{
		public double number;
		public Node next;

		public Node (double number)
		{
			this.number = number;
			next = null;
		}
	}

	// the first node in the node-sequence
	private Node first;

	// create the sequence
	public LinkedNumberSequence (double[] numbers)
	{
		if (numbers.length < 2)
			throw new IllegalArgumentException("not a sequence");

		first = new Node(numbers[0]);
		Node n = first;
		for (int i = 1; i < numbers.length; i++)
		{
			n.next = new Node(numbers[i]);
			n = n.next;
		}
	}

	// toString returns the character string representing this
	// sequence
	public String toString ()
	{
		String s = "";
		Node n = first;
		while (n.next != null)
		{
			s = s + n.number + ", ";
			n = n.next;
		}
		s = s + n.number;

		return s;
	}

	// add code here
	public double[] asArray() {
		List<Double> numberList = new ArrayList<>();
		Node current = first;

		// Traverse the linked nodes and add numbers to the list
		while (current != null) {
			numberList.add(current.number);
			current = current.next;
		}

		// Convert list to array
		double[] result = new double[numberList.size()];
		for (int i = 0; i < numberList.size(); i++) {
			result[i] = numberList.get(i);
		}
		return result;
	}
}