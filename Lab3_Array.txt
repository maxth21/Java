package Lab3;// ArrayNumberSequence.java

/****************************************************************

 ArrayNumberSequence represents a sequence of real numbers.
 Such a sequence is defined by the interface NumberSequence.
 The class uses an array to store the numbers in the sequence.

 Author
 Fadil Galjic

 ****************************************************************/

public class ArrayNumberSequence implements NumberSequence
{
	// numbers in the sequence
	private double[] numbers;

	// create the sequence
	public ArrayNumberSequence (double[] numbers)
	{
		if (numbers.length < 2)
			throw new IllegalArgumentException("not a sequence");

		this.numbers = new double[numbers.length];
		for (int i = 0; i < numbers.length; i++)
			this.numbers[i] = numbers[i];
	}

	// toString returns the character string representing this
	// sequence
	public String toString ()
	{
		String s = "";
		for (int i = 0; i < numbers.length - 1; i++)
			s = s + numbers[i] + ", ";
		s = s + numbers[numbers.length - 1];

		return s;
	}

	@Override
	public int length() {
		return numbers.length;
	}

	@Override
	public double upperBound() {
		if (numbers.length == 0) {
			throw new IllegalStateException("Sequence is empty");
		}

		double max = numbers[0];
		for (int i = 1; i < numbers.length; i++) {
			if (numbers[i] > max) {
				max = numbers[i];
			}
		}
		return max;
	}

	@Override
	public double lowerBound() {
		if (numbers.length == 0) {
			throw new IllegalStateException("Sequence is empty");
		}

		double min = numbers[0];
		for (int i = 1; i < numbers.length; i++) {
			if (numbers[i] < min) {
				min = numbers[i];
			}
		}
		return min;
	}

	@Override
	public double numberAt(int position) throws IndexOutOfBoundsException {
		if (position < 0 || position >= numbers.length) {
			throw new IndexOutOfBoundsException("Invalid position");
		}
		return numbers[position];
	}

	@Override
	public int positionOf(double number) {
		for (int i = 0; i < numbers.length; i++) {
			if (numbers[i] == number) {
				return i;
			}
		}
		return -1; // Return -1 if the number is not found in the sequence
	}

	@Override
	public boolean isIncreasing() {
		for (int i = 1; i < numbers.length; i++) {
			if (numbers[i] <= numbers[i - 1]) {
				return false;
			}
		}
		return true;
	}

	@Override
	public boolean isDecreasing() {
		for (int i = 1; i < numbers.length; i++) {
			if (numbers[i] >= numbers[i - 1]) {
				return false;
			}
		}
		return true;
	}

	@Override
	public boolean contains(double number) {
		for (double num : numbers) {
			if (num == number) {
				return true;
			}
		}
		return false;
	}

	@Override
	public void add(double number) {
		double[] newNumbers = new double[numbers.length + 1];
		System.arraycopy(numbers, 0, newNumbers, 0, numbers.length);
		newNumbers[numbers.length] = number;
		numbers = newNumbers;
	}

	@Override
	public void insert(int position, double number) throws IndexOutOfBoundsException {
		if (position < 0 || position > numbers.length) {
			throw new IndexOutOfBoundsException("Invalid position");
		}

		double[] newNumbers = new double[numbers.length + 1];
		System.arraycopy(numbers, 0, newNumbers, 0, position);
		newNumbers[position] = number;
		System.arraycopy(numbers, position, newNumbers, position + 1, numbers.length - position);
		numbers = newNumbers;
	}

	@Override
	public void removeAt(int position) throws IndexOutOfBoundsException, IllegalStateException {
		if (numbers.length <= 2) {
			throw new IllegalStateException("Sequence should have at least two numbers");
		}

		if (position < 0 || position >= numbers.length) {
			throw new IndexOutOfBoundsException("Invalid position");
		}

		double[] newNumbers = new double[numbers.length - 1];
		System.arraycopy(numbers, 0, newNumbers, 0, position);
		System.arraycopy(numbers, position + 1, newNumbers, position, numbers.length - position - 1);
		numbers = newNumbers;
	}

	// add code here
	public double[] asArray() {
		// Returns a copy of the 'numbers' array to avoid direct manipulation of the internal array
		return numbers.clone();
	}
}